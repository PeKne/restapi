FORMAT: 1A
HOST: http://sqldep.com/api/rest

# SQLdep API

# Group Create SQL set

## /sqlset/create

### POST

Submit your SQL statements and let SQLdep compute metadata.

+ Request (application/json)

        {
            "userAccountId": "df4ge57s87fs",                // Required; will be provided to you by SQLdep team
            "dialect": "oracle",                            // Required; options: oracle/postgres/mssql/redshift
            "customSqlSetName": "",                         // Optional; when empty hash value will be generated; allowed characters [a-Z0-9_]
            "databasePhysicalModel" : [                     // Optional; recommended way how to submit physical model from database catalog
                {
                    "tables:" : [                           // Definitions for tables/views
                        {
                            "dbName": "database_name",          // Database where the table/view resides in
                            "objectType": "table",              // Is this definition for table or view
                            "tableOwner": "owner_name",         // Name of the owner for the table/View 
                            "tableName": "table_name",         // Table/view name
                            "columnName": "column_name",         // Name of the column
                            "columnPosition": 1,                 // Column position within the table/view
                            "columnDataTyṕe": "column_datatype", // Column datatype
                            "columnComment": "column_comment"   // Column comment if available
                        },
                        {
                            "dbName": "database_name",
                            "objectType": "table",
                            "tableOwner": "owner_name",
                            "tableName": "table_name",
                            "columnName": "column_name",
                            "columnPosition": 2,
                            "columnDataTyṕe": "column_datatype",
                            "columnComment": "column_comment"
                        },
                        ...
                    ],
                    "synonyms" : [                              // Optional; skip if you do not use any synonyms
                        {
                            "dbName": "database_name",          // Database name where the synonyms resides in
                            "synonymOwner": "synonym_owner",    // Name of the synonym owner
                            "synonymName": "synonym_name",      // Synonym name
                            "sourceTableOwner": "owner_name",   // Name of the owner for source table/view
                            "sourceTableName": "table_name",    // Table/view name
                            "sourceTableDbLinkName": "db_link_name"   // Database link for source table/view
                        },
                        ...
                    ]
                }    
            ],
            "queries" : [
                {
                    "id": 1,                                 // Required; must be unique across all queries
                    "databaseName": "database_name"         // Required; name of the database the query is running on
                    "sourceCode": "select * from table1"   // Required; a) must be valid SQL command without futher editing
                                                             //           b) must contain one or more valid SQL commands
                                                             //           c) multi-line formating is allowed
                    "processStatusCode": "READY",           // Optional; when empty READY will be used
                    "name": "",                              // Optional; for visualization purposes - use your internal name if available
                    "groupName": "",                         // Optional; for visualization purposes - use your internal name if available
                    "executionUser": ""                      // Optional; When empty DEFAULT will be used
                },
                {
                    "id" : 2,
                    "databaseName": "database_name"
                    "sourceCode": "select * from table2"
                    ...
                },
                ...
            ]
        }

+ Response 200 (application/json)

        {
            "success": true,
            "message": "",                                  // Detailed error message. Empty for success response
            "sqlSetName": "6C2D8652",
            "urlToVisualisation": "http://www.sqldep.com/sqlset-6C2D8652",
            "queries": [{
                "id": 1,
                "processStatusCode": "DONE"
                "processStatusDesc": ""                     
            }, {
                "id": 2,
                "processStatusCode": "DONE"
                "processStatusDesc": ""
            }]
        }
        
+ Response 500 (application/json)

        {
            "success": false,
            "message": "Error description"
        }

# Group Download metadata

## /sqlset/getAllSchemas
### POST
List of database schemas.

+ Request (application/json)

        {
            "userAccountId": "df4ge57s87fs",                // Required; will be provided to you by SQLdep team
            "sqlSet": "dsrscsg"                             // Required; name of the sqlset
        }

+ Response 200 (application/json)

        {
            "success": true,
            "message": "",                                  // Detailed error message. Empty for success response
            "schemas": [{
                "schemaId": 1,                              // Unique ID
                "databaseId": 1,
                "schemaName": "xxxx"
            }]
        }
        
+ Response 500 (application/json)

        {
            "success": false,
            "message": "Error description"
        }
        
## /sqlset/getAllTables

### POST
List of tables and views.

+ Request (application/json)

        {
            "userAccountId": "df4ge57s87fs",                // Required; will be provided to you by SQLdep team
            "sqlSet": "dsrscsg"                             // Required; name of the sqlset
        }

+ Response 200 (application/json)

        {
            "success": true,
            "message": "",                                  // Detailed error message. Empty for success response
            "tables": [{
                "tableId": 1,                               // Unique ID
                "schemaId": 1,
                "tableName": "Table Name",                     
                "tableType": "Table Type"
            }]
        }
        
+ Response 500 (application/json)

        {
            "success": false,
            "message": "Error description"
        }
        
## /sqlset/getAllColumns
### POST
List of columns for each table/view.

+ Request (application/json)

        {
            "userAccountId": "df4ge57s87fs",                // Required; will be provided to you by SQLdep team
            "sqlSet": "dsrscsg"                             // Required; name of the sqlset
        }

+ Response 200 (application/json)

        {
            "success": true,
            "message": "",                                  // Detailed error message. Empty for success response
            "columns": [{
                "columnId": 1,                              // Unique ID
                "tableId": 1,
                "columnName": "xxxx",                     
                "columnDesc": "xxxx",
                "dataType": "xxxx",
                "position": "xxxx",
                "nullable": "xxxx"
            }]
        }
        
+ Response 500 (application/json)

        {
            "success": false,
            "message": "Error description"
        }
        
## Column based data-lineage [/sqlset/getAllColumnLineage]

### POST
Parent vs child relations between columns.

+ Request (application/json)

        {
            "userAccountId": "df4ge57s87fs",                // Required; will be provided to you by SQLdep team
            "sqlSet": "dsrscsg"                             // Required; name of the sqlset
        }

+ Response 200 (application/json)

        {
            "success": true,
            "message": "",                                  // Detailed error message. Empty for success response
            "dataFlows": [{
                "dataLineageId": 1,                         // Unique ID
                "sourceColumnId": 1,
                "targetColumnId": 1,
            }]
        }
        
+ Response 500 (application/json)

        {
            "success": false,
            "message": "Error description"
        }

## Table dependencies [/sqlset/getAllTableDependencies]

### POST
Parent vs child relations between tables.

+ Request (application/json)

        {
            "userAccountId": "df4ge57s87fs",                // Required; will be provided to you by SQLdep team
            "sqlSet": "dsrscsg"                             // Required; name of the sqlset
        }

+ Response 200 (application/json)

        {
            "success": true,
            "message": "",                                  // Detailed error message. Empty for success response
            "dataFlows": [{
                "tableDependenciesId": 1,                   // Unique ID
                "sourceTableId": 1,
                "targetTableId": 1,
            }]
        }
        
+ Response 500 (application/json)

        {
            "success": false,
            "message": "Error description"
        }
