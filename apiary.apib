FORMAT: 1A
HOST: http://sqldep.com/api/rest

# SQLdep API

# Group Create SQL set

## /sqlset/create

### POST

Submit your SQL statements and let SQLdep compute metadata.

+ Request (application/json)

        {
            "userAccountId": "df4ge57s87fs",                // Required; will be provided to you by SQLdep team
            "dialect": "oracle",                            // Required; options: oracle/postgres/mssql/redshift
            "customSqlSetName": "",                         // Optional; when empty hash value will be generated; allowed characters [a-Z0-9_]
            "queries" : [
                {
                    "id": 1,                                 // Required; must be unique across all queries
                    "sourceCode": "select * from table1"     // Required; a) must be valid SQL command without futher editing
                                                             //           b) must contain one or more valid SQL commands
                                                             //           c) multi-line formating is allowed
                    "processStatusCode": "READY",            // Optional; when empty READY will be used
                    "name": "",                              // Optional; for visualization purposes - use your internal name if available
                    "groupName": "",                         // Optional; for visualization purposes - use your internal name if available
                    "executionUser": ""                      // Optional; When empty DEFAULT will be used
                },
                {
                    "id" : 2,
                    "sourceCode": "select * from table2"
                    ...
                },
                ...
            ],
            "databaseModel" : {                                                 // Optional; you can leave this section completely empty
                "databases" : [                                                 
                    {
                        "name": "LIVE",                                         // Required; name of the database
                        "tables": [
                            {
                                "isView": false,                                // Optional; truthy => virtual table, falsy => real table
                                "owner": "ETL_OWNER",                           // Required; name of the owner for the table/view 
                                "name": "ACCOUNTS",                             // Required; name of the table/view
                                "columns": [
                                    {
                                        "name": "ACC_ID",                       // Required; name of the column
                                        "position": 1,                          // Optional; column position within the table/view
                                        "dataTyṕe": "NUMBER(10)",               // Optional; column data type
                                        "comment": "Unique account identifier"  // Optional; column comment if available
                                    },
                                    {
                                        "name": "ACC_OPEN_DATE",
                                        "position": 2,
                                        "dataTyṕe": "DATE",
                                        "comment": "Date when the account was open"
                                    },
                                    ...
                                ]
                            },
                            ...
                        ],
                        "synonyms" : [                          // Optional; skip if you do not use any synonyms
                            {
                                "owner": "DW_OWNER",            // Required; Name of the synonym owner
                                "name": "ACCOUNTS",             // Required; Synonym name
                                "sourceOwner": "ETL_OWNER",     // Required; Name of the owner for source table/view
                                "sourceName": "ACCOUNTS",       // Required; Table/view name
                                "sourceDbLinkName": ""          // Optional; Database link for source table/view
                            },
                            ...
                        ]
                    }
                ]
            }
        }

+ Response 200 (application/json)

        {
            "success": true,
            "message": "",                                  // Detailed error message. Empty for success response
            "sqlSetName": "6C2D8652",
            "urlToVisualisation": "http://www.sqldep.com/sqlset-6C2D8652",
            "queries": [{
                "id": 1,
                "processStatusCode": "DONE"
                "processStatusDesc": ""                     
            }, {
                "id": 2,
                "processStatusCode": "DONE"
                "processStatusDesc": ""
            }]
        }
        
+ Response 500 (application/json)

        {
            "success": false,
            "message": "Error description"
        }

# Group Download metadata

## /sqlset/getAllSchemas
### POST
List of database schemas.

+ Request (application/json)

        {
            "userAccountId": "df4ge57s87fs",                // Required; will be provided to you by SQLdep team
            "sqlSet": "dsrscsg"                             // Required; name of the sqlset
        }

+ Response 200 (application/json)

        {
            "success": true,
            "message": "",                                  // Detailed error message. Empty for success response
            "schemas": [{
                "schemaId": 1,                              // Unique ID
                "databaseId": 1,
                "schemaName": "xxxx"
            }]
        }
        
+ Response 500 (application/json)

        {
            "success": false,
            "message": "Error description"
        }
        
## /sqlset/getAllTables

### POST
List of tables and views.

+ Request (application/json)

        {
            "userAccountId": "df4ge57s87fs",                // Required; will be provided to you by SQLdep team
            "sqlSet": "dsrscsg"                             // Required; name of the sqlset
        }

+ Response 200 (application/json)

        {
            "success": true,
            "message": "",                                  // Detailed error message. Empty for success response
            "tables": [{
                "tableId": 1,                               // Unique ID
                "schemaId": 1,
                "tableName": "Table Name",                     
                "tableType": "Table Type"
            }]
        }
        
+ Response 500 (application/json)

        {
            "success": false,
            "message": "Error description"
        }
        
## /sqlset/getAllColumns
### POST
List of columns for each table/view.

+ Request (application/json)

        {
            "userAccountId": "df4ge57s87fs",                // Required; will be provided to you by SQLdep team
            "sqlSet": "dsrscsg"                             // Required; name of the sqlset
        }

+ Response 200 (application/json)

        {
            "success": true,
            "message": "",                                  // Detailed error message. Empty for success response
            "columns": [{
                "columnId": 1,                              // Unique ID
                "tableId": 1,
                "columnName": "xxxx",                     
                "columnDesc": "xxxx",
                "dataType": "xxxx",
                "position": "xxxx",
                "nullable": "xxxx"
            }]
        }
        
+ Response 500 (application/json)

        {
            "success": false,
            "message": "Error description"
        }
        
## Column based data-lineage [/sqlset/getAllColumnLineage]

### POST
Parent vs child relations between columns.

+ Request (application/json)

        {
            "userAccountId": "df4ge57s87fs",                // Required; will be provided to you by SQLdep team
            "sqlSet": "dsrscsg"                             // Required; name of the sqlset
        }

+ Response 200 (application/json)

        {
            "success": true,
            "message": "",                                  // Detailed error message. Empty for success response
            "dataFlows": [{
                "dataLineageId": 1,                         // Unique ID
                "sourceColumnId": 1,
                "targetColumnId": 1,
            }]
        }
        
+ Response 500 (application/json)

        {
            "success": false,
            "message": "Error description"
        }

## Table dependencies [/sqlset/getAllTableDependencies]

### POST
Parent vs child relations between tables.

+ Request (application/json)

        {
            "userAccountId": "df4ge57s87fs",                // Required; will be provided to you by SQLdep team
            "sqlSet": "dsrscsg"                             // Required; name of the sqlset
        }

+ Response 200 (application/json)

        {
            "success": true,
            "message": "",                                  // Detailed error message. Empty for success response
            "dataFlows": [{
                "tableDependenciesId": 1,                   // Unique ID
                "sourceTableId": 1,
                "targetTableId": 1,
            }]
        }
        
+ Response 500 (application/json)

        {
            "success": false,
            "message": "Error description"
        }
