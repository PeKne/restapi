FORMAT: 1A
HOST: https://sqldep.com/

# SQLdep API

# Group QueryFlow

## /api/rest/sqlset/create/

### POST

Submit your SQL statements and let SQLdep compute metadata.

+ Request (application/json)

    + Attributes (Input)

    + Body

        {
            "userAccountId": "7f3e205e-34c9-4791-a343-83988b230d0e",                // * Required; will be provided to you by SQLdep team
            "dialect": "oracle",                            // * Required; options: 'oracle', 'generic', 'redshift', 'teradata', 'vertica', 'mssql', 'tsql', 'postgres'
            "customSqlSetName": "",                         // Optional; when empty hash value will be generated; allowed characters [a-Z0-9_]
            "queries" : [
                {
                    "sourceCode": "select * from table1",    // * Required; a) must be valid SQL command without futher editing
                                                             //             b) must contain one or more valid SQL commands
                                                             //             c) multi-line formating is allowed
                    "name": "",                              // Optional; for visualization purposes - use your internal name if available
                    "groupName": "",                         // Optional; for visualization purposes - use your internal name if available
                    "database": "",                          // Optional
                    "schema": "",                            // Optional
                    "executionUser": ""                      // Optional; alternative name for the "schema" field
                },
                {
                    "sourceCode": "select * from table2",
                    ...
                },
                ...
            ],
            "databaseModel" : {                                                 // Optional; you can omit this section completely
                "databases" : [
                    {
                        "name": "LIVE",                                         // * Required; name of the database, avoid using duplicate names (only the first occurrence is going to be processed)
                        "tables": [
                            {
                                "schema": "ETL_SCHEMA",                         // * Required; name of the schema for the table/view
                                "name": "ACCOUNTS",                             // * Required; name of the table/view, avoid using duplicate names (only the first occurrence is going to be processed)
                                "isView": false,                                // Optional; true => view, otherwise => table
                                "columns": [                                    // Columns are processed sequentially, provide them in the same order as in your table/view
                                    {
                                        "name": "ACC_ID",                       // * Required; name of the column, avoid using duplicate names (only the first occurrence is going to be processed)
                                        "dataType": "NUMBER(10)",               // Optional; column data type
                                        "comment": "Unique account identifier"  // Optional; column comment if available
                                    },
                                    {
                                        "name": "ACC_OPEN_DATE",
                                        "dataType": "DATE",
                                        "comment": "Date when the account was open"
                                    },
                                    ...
                                ]
                            },
                            ...
                        ],
                        "synonyms" : [                          // Optional; omit this or leave it empty if you do not use any synonyms
                            {
                                "schema": "DW_SCHEMA",          // * Required; Name of the synonym schema
                                "name": "ACCOUNTS",             // * Required; Synonym name, avoid using duplicate names (only the first occurrence is going to be processed)
                                "sourceName": "ACCOUNTS",       // * Required; Table/view name
                                "sourceSchema": "ETL_SCHEMA",   // Optional; Name of the schema for source table/view
                                "sourceDbLinkName": ""          // Optional; Database link for source table/view
                            },
                            ...
                        ]
                    }
                ]
            },
            "dblinks" : [                            // Optional; links to other databases
                {
                    "owner" : "",
                    "name" : "",
                    "userName" : "",
                    "host" : ""
                },
                ...
            ],
            "sqldep-dataflows": [                   // Optional; Predefined custom dataflows
                {
                    "source": {                     // * Required; Source fully-qualified column of a dataflow
                        "column": "ACC_ID",         // * Required; Column name
                        "table": "ACCOUNTS",        // * Required; Table name of the column
                        "schema": "ETL_SCHEMA",     // * Required; Schema name of the table
                        "database": "LIVE"          // * Required; Database of the schema
                    },
                    "target": {                     // * Required; Target fully-qualified column of a dataflow
                        "column": "USER_ID",        // * Required; The same as above...
                        "table": "ACCOUNTS_LOG",    // * Required
                        "schema": "ETL_SCHEMA",     // * Required
                        "database": "LIVE"          // * Required
                    }
                },
                ...
            ]
        }

+ Response 200 (application/json)

    + Attributes (object)

        - customSqlSetName: `20150904T120351.321744` (string, required)
        - urlToVisualisation: `https://sqldep.com/browser/batch/20150904T120351.321744/` (string, required)
        - success: true (boolean, required)
        - message (object, nullable)

    + Body

        {
            "customSqlSetName": null,
            "urlToVisualisation": "https://prod.sqldep.com/browser/batch/20150904T120351.321744/",
            "message": null,                                // Detailed error message. Empty for success response
            "success": true
        }

+ Response 400 (application/json)

    + Attributes (object)

        - success: false (boolean, required)
        - message (object, nullable)

    + Body

        {
            "success": false,
            "message": {
                "userAccountId": [
                    "This field may not be null."
                ]
            }
        }



## /api/batch/

### POST

Submit your SQL statements and let SQLdep compute metadata. With headers authentication

+ Request (application/json)

    + Headers

        Authorization: Token 7f3e205e-34c9-4791-a343-83988b230d0e

    + Body

        {
            "dialect": "oracle",                            // * Required; options: 'oracle', 'generic', 'redshift', 'teradata', 'vertica', 'mssql', 'tsql', 'postgres'
            "customSqlSetName": "",                         // Optional; when empty hash value will be generated; allowed characters [a-Z0-9_]
            "queries" : [
                {
                    "sourceCode": "select * from table1",    // * Required; a) must be valid SQL command without futher editing
                                                             //             b) must contain one or more valid SQL commands
                                                             //             c) multi-line formating is allowed
                    "name": "",                              // Optional; for visualization purposes - use your internal name if available
                    "groupName": "",                         // Optional; for visualization purposes - use your internal name if available
                    "database": "",                          // Optional
                    "schema": "",                            // Optional
                    "executionUser": ""                      // Optional; alternative name for the "schema" field
                },
                {
                    "sourceCode": "select * from table2",
                    ...
                },
                ...
            ],
            "databaseModel" : {                                                 // Optional; you can omit this section completely
                "databases" : [
                    {
                        "name": "LIVE",                                         // * Required; name of the database, avoid using duplicate names (only the first occurrence is going to be processed)
                        "tables": [
                            {
                                "schema": "ETL_SCHEMA",                         // * Required; name of the schema for the table/view
                                "name": "ACCOUNTS",                             // * Required; name of the table/view, avoid using duplicate names (only the first occurrence is going to be processed)
                                "isView": false,                                // Optional; true => view, otherwise => table
                                "columns": [                                    // Columns are processed sequentially, provide them in the same order as in your table/view
                                    {
                                        "name": "ACC_ID",                       // * Required; name of the column, avoid using duplicate names (only the first occurrence is going to be processed)
                                        "dataType": "NUMBER(10)",               // Optional; column data type
                                        "comment": "Unique account identifier"  // Optional; column comment if available
                                    },
                                    {
                                        "name": "ACC_OPEN_DATE",
                                        "dataType": "DATE",
                                        "comment": "Date when the account was open"
                                    },
                                    ...
                                ]
                            },
                            ...
                        ],
                        "synonyms" : [                          // Optional; omit this or leave it empty if you do not use any synonyms
                            {
                                "schema": "DW_SCHEMA",          // * Required; Name of the synonym schema
                                "name": "ACCOUNTS",             // * Required; Synonym name, avoid using duplicate names (only the first occurrence is going to be processed)
                                "sourceName": "ACCOUNTS",       // * Required; Table/view name
                                "sourceSchema": "ETL_SCHEMA",   // Optional; Name of the schema for source table/view
                                "sourceDbLinkName": ""          // Optional; Database link for source table/view
                            },
                            ...
                        ],
                        "dblinks" : [                            // Optional; links to other databases
                            {
                                "owner" : "",
                                "name" : "",
                                "userName" : "",
                                "host" : ""
                            },
                            ...
                        ]
                    }
                ]
            }
        }


+ Response 201 (application/json)

    + Body

        {
            "dialect": "oracle",                            
            "queries" : [
                {
                    "sourceCode": "select * from table1",    
                                                             
                                                             
                    "name": "",                              
                    "groupName": "",                         
                    "database": "",                          
                    "schema": "",                            
                    "executionUser": ""                      
                },
                {
                    "sourceCode": "select * from table2",
                    ...
                },
                ...
            ],
        }

+ Response 400 (application/json)

    + Body

        {
            "dialect": ["This field is required."],
            ...
        }


# Batch objects

## /api/batch/<batch_slug>/objects/

### GET

Get batch objects in tree structure.

+ Request (application/json)

    + Headers

        Authorization: Token 7f3e205e-34c9-4791-a343-83988b230d0e

+ Response 200 (application/json)

    {
        "slug": "20151125T091111.087087",
        "title": "Demo visualization",
        "objects": {
            "databases": [{
                "name": "DEMO",
                "schemas": [{
                    "tables": [{
                        "name": "IN.ARTICLE_OVERVIEWOPTIONS",
                        "columns": [{
                            "name": "CUST_APPLICATION_ID"
                        }, {
                            "name": "INSIGHT_OPTION_ID"
                        }]
                    }, {
                        "name": "IN.COMPONENTS",
                        "columns": [{
                            "name": "ID"
                        }, {
                            "name": "SYSTEM_ID"
                        }, {
                            "name": "FOUNDER_NAME"
                        }]
                    }, {
                        "name": "IN.CONTENTPOST_PAIRS",
                        "columns": [{
                            "name": "VALUE"
                        }, {
                            "name": "CUST_APPLICATION_ID"
                        }, {
                            "name": "NAME"
                        }]
                    }, {
                        "name": "IN.EVENT",
                        "columns": [{
                            "name": "ID"
                        }, {
                            "name": "CUST_APPLICATION_ID"
                        }, {
                            "name": "USER_ID"
                        }]
                    }, {
                        "name": "IN.OVERVIEWOPTION",
                        "columns": [{
                            "name": "ID"
                        }, {
                            "name": "CUSTOMER_CONSOLIDATED_ID"
                        }]
                    }, {
                        "name": "IN.REJECTIONREASON",
                        "columns": [{
                            "name": "ID"
                        }]
                    }, {
                        "name": "IN.SYSTEM",
                        "columns": [{
                            "name": "CUSTOMER_CONSOLIDATED_ID"
                        }, {
                            "name": "ID"
                        }]
                    }],
                    "name": "INBOUND"
                }, {
                    "tables": [{
                        "name": "OUT.CONVERSATION",
                        "columns": [{
                            "name": "ID"
                        }]
                    }, {
                        "name": "OUT.FORMS_VALUES",
                        "columns": [{
                            "name": "ID"
                        }, {
                            "name": "CUSTOMER_OBJECT_ID"
                        }, {
                            "name": "CUSTOMERID"
                        }]
                    }, {
                        "name": "OUT.FOUNDER",
                        "columns": [{
                            "name": "ID"
                        }, {
                            "name": "NAME"
                        }, {
                            "name": "CUSTOMERID"
                        }]
                    }, {
                        "name": "OUT.OBJECTS",
                        "columns": [{
                            "name": "ID"
                        }, {
                            "name": "CONVERSATION_ID"
                        }, {
                            "name": "CONS_ID"
                        }, {
                            "name": "ARTICLE_FULL_URL"
                        }]
                    }, {
                        "name": "SQLDEP-CONSTANT",
                        "columns": [{
                            "name": "SQLDEP-CONSTANT"
                        }, {
                            "name": "SQLDEP-CONSTANT"
                        }, {
                            "name": "SQLDEP-CONSTANT"
                        }]
                    }],
                    "name": "OUT"
                }]
            }]
        }
    }


# Batch relations

## /api/batch/<batch_slug>/relations/

### GET

Get count and url of batch relations.

+ Request (application/json)

    + Headers

        Authorization: Token 7f3e205e-34c9-4791-a343-83988b230d0e

+ Response 200 (application/json)
    
    {
        "slug": "ea042381-5130-467d-8ab2-094c04bdf3ea",
        "title": "Demo",
        "relations": {
            "tables": {
                "count": 120,
                "url": "https://sqldep.com/api/batch/ea042381-5130-467d-8ab2-094c04bdf3ea/relations/columns/"
            },
            "columns": {
                "count": 3000,
                "url": "https://sqldep.com/api/batch/ea042381-5130-467d-8ab2-094c04bdf3ea/relations/tables/"
            }
        }
    }


# Batch tables relations

## /api/batch/<batch_slug>/relations/tables/

### GET

Get list of batch tables relations.

+ Request (application/json)

    + Headers

        Authorization: Token 7f3e205e-34c9-4791-a343-83988b230d0e

+ Response 200 (application/json)

    {
        "slug": "ea042381-5130-467d-8ab2-094c04bdf3ea",
        "title": "Demo",
        "relations": [{
            "source": {
                "table": "BRIDGE.OBJECTS",
                "schema": "PUBLIC",
                "database": "DEFAULT"
            },
            "type": null,
            "id": 1,
            "target": {
                "table": "NEGTIVES",
                "schema": "PUBLIC_NEW",
                "database": "DEFAULT"
            }
        }, {
            "source": {
                "table": "TOTALS",
                "schema": "PUBLIC",
                "database": "DEFAULT"
            },
            "type": null,
            "id": 2,
            "target": {
                "table": "PUBLIC.MOOD",
                "schema": "PUBLIC",
                "database": "DEFAULT"
            }
        }]
    }



# Batch columns relations

## /api/batch/<batch_slug>/relations/columns/

### GET

Get list of batch columns relations.

+ Request (application/json)

    + Headers

        Authorization: Token 7f3e205e-34c9-4791-a343-83988b230d0e

+ Response 200 (application/json)

    {
        "slug": "ea042381-5130-467d-8ab2-094c04bdf3ea",
        "title": "Demo",
        "relations": [{
            "source": {
                "column": "CONS_ID",
                "table": "BRIDGE.OBJECTS",
                "schema": "PUBLIC",
                "database": "DEFAULT"
            },
            "type": null,
            "id": 1,
            "target": {
                "column": "CONS_ID",
                "table": "NEGTIVES",
                "schema": "PUBLIC_NEW",
                "database": "DEFAULT"
            }
        }, {
            "source": {
                "column": "ID",
                "table": "BRIDGE.OBJECTS",
                "schema": "PUBLIC",
                "database": "DEFAULT"
            },
            "type": null,
            "id": 2,
            "target": {
                "column": "NEGTIVES",
                "table": "NEGTIVES",
                "schema": "PUBLIC_NEW",
                "database": "DEFAULT"
            }
        }]
    }



# Compare batches

## /api/batch/compare/

### POST

Compare two SQL codes.

+ Request (application/json)

    + Headers

        Authorization: Token 7f3e205e-34c9-4791-a343-83988b230d0e

    + Body

        [
            {
                "dialect": "oracle",                            // * Required; options: 'oracle', 'generic', 'redshift', 'teradata', 'vertica', 'mssql', 'tsql', 'postgres'
                "customSqlSetName": "",                         // Optional; when empty hash value will be generated; allowed characters [a-Z0-9_]
                "queries" : [
                    {
                        "sourceCode": "select * from table1",    // * Required; a) must be valid SQL command without futher editing
                                                                 //             b) must contain one or more valid SQL commands
                                                                 //             c) multi-line formating is allowed
                        "name": "",                              // Optional; for visualization purposes - use your internal name if available
                        "groupName": "",                         // Optional; for visualization purposes - use your internal name if available
                        "database": "",                          // Optional
                        "schema": "",                            // Optional
                        "executionUser": ""                      // Optional; alternative name for the "schema" field
                    },
                    {
                        "sourceCode": "select * from table2",
                        ...
                    },
                    ...
                ],
                "databaseModel" : {                                                 // Optional; you can omit this section completely
                    "databases" : [
                        {
                            "name": "LIVE",                                         // * Required; name of the database, avoid using duplicate names (only the first occurrence is going to be processed)
                            "tables": [
                                {
                                    "schema": "ETL_SCHEMA",                         // * Required; name of the schema for the table/view
                                    "name": "ACCOUNTS",                             // * Required; name of the table/view, avoid using duplicate names (only the first occurrence is going to be processed)
                                    "isView": false,                                // Optional; true => view, otherwise => table
                                    "columns": [                                    // Columns are processed sequentially, provide them in the same order as in your table/view
                                        {
                                            "name": "ACC_ID",                       // * Required; name of the column, avoid using duplicate names (only the first occurrence is going to be processed)
                                            "dataType": "NUMBER(10)",               // Optional; column data type
                                            "comment": "Unique account identifier"  // Optional; column comment if available
                                        },
                                        {
                                            "name": "ACC_OPEN_DATE",
                                            "dataType": "DATE",
                                            "comment": "Date when the account was open"
                                        },
                                        ...
                                    ]
                                },
                                ...
                            ],
                            "synonyms" : [                          // Optional; omit this or leave it empty if you do not use any synonyms
                                {
                                    "schema": "DW_SCHEMA",          // * Required; Name of the synonym schema
                                    "name": "ACCOUNTS",             // * Required; Synonym name, avoid using duplicate names (only the first occurrence is going to be processed)
                                    "sourceName": "ACCOUNTS",       // * Required; Table/view name
                                    "sourceSchema": "ETL_SCHEMA",   // Optional; Name of the schema for source table/view
                                    "sourceDbLinkName": ""          // Optional; Database link for source table/view
                                },
                                ...
                            ],
                            "dblinks" : [                            // Optional; links to other databases
                                {
                                    "owner" : "",
                                    "name" : "",
                                    "userName" : "",
                                    "host" : ""
                                },
                                ...
                            ]
                        }
                    ]
                }
            },
            ...  // limit 2 items
        ]

+ Response 201 (application/json)

    + Body
        {
          "compareBatches": {
            "batches": [
              {
                "master": true,
                "slug": "d06833f6-0b72-4fbc-b5ac-4769ef2dfef7",
                "urlToVisialisation": "https://localhost:8000/browser/batch/d06833f6-0b72-4fbc-b5ac-4769ef2dfef7/"
              },
              {
                "master": false,
                "slug": "bf070b76-7e5b-47ca-82ea-1778f3410824",
                "urlToVisialisation": "https://localhost:8000/browser/batch/bf070b76-7e5b-47ca-82ea-1778f3410824/"
              }
            ],
            "urlToCompareVisualisation": "https://localhost:8000/browser/batch/d06833f6-0b72-4fbc-b5ac-4769ef2dfef7/bf070b76-7e5b-47ca-82ea-1778f3410824/"
          }
        }



# Data Structures

## Input (object)

- userAccountId: `7f3e205e-34c9-4791-a343-83988b230d0e` (string, required) - will be provided to you by SQLdep team
- dialect: oracle (enum, required)
    - generic
    - oracle
    - redshift
    - teradata
    - vertica
    - mssql
    - tsql
    - postgres
- customSqlSetName (string, optional) - when empty hash value will be generated; allowed characters `[a-Z0-9_]`
- queries (array[Query], required)
- databaseModel (DatabaseModel, optional)
- dblinks (array[DBLink])

## Query (object)

- sourceCode: `select * from table1` (string, required)

    a) must be valid SQL command without futher editing
    b) must contain one or more valid SQL commands
    c) multi-line formating is allowed

- name (string, optional) - for visualization purposes - use your internal name if available
- groupName (string, optional) - for visualization purposes - use your internal name if available
- database (string, optional)
- schema (string, optional)
- executionUser (string, optional) - alternative name for the "schema" field

## DatabaseModel (object)

- databases (array[Database])

## Database (object)

- name: LIVE (string, required) - name of the database, avoid using duplicate names (only the first occurrence may be processed)
- tables (array[Table])
- synonyms (array[Synonym])

## Table (object)

- schema: `ETL_SCHEMA` (string, required) - name of the schema for the table/view
- name: ACCOUNT (string, required) - name of the table/view, avoid using duplicate names (only the first occurrence may be processed)
- isView: false (boolean, optional, default) - true => view, otherwise => table
- columns (array[Column]) - columns are processed sequentially, provide them in the same order as in your table/view

## Column (object)

- name: `ACC_ID` (string, required) - name of the column, avoid using duplicate names (only the first occurrence may be processed)
- dataType: `NUMBER(10)` (string, optional) - column data type
- comment: `Unique account identifier` (string, optional) - column comment if available

## Synonym (object)

- schema: `DW_SCHEMA` (string, required) - name of the synonym schema
- name: ACCOUNTS (string, required) - synonym name, avoid using duplicate names (only the first occurrence may be processed)
- sourceName: ACCOUNTS (string, required) - table/view name
- sourceSchema: `ETL_SCHEMA` (string, optional) - name of the schema for source table/view
- sourceDbLinkName (string, optional) - database link for source table/view

## DBLink (object)

- owner : (string, required)
- name : (string, required)
- userName : (string, required)
- host : (string, required)

# Group QueryScope

## /api/qs/batch/

### POST

Create a new batch.

+ Request (application/json)

    + Headers

        Authorization: Token 7f3e205e-34c9-4791-a343-83988b230d0e

    + Body

        {
            "dialect": "oracle", // * Required; options: 'oracle', 'generic', 'redshift', 'teradata', 'vertica', 'mssql', 'tsql', 'postgres'
            "query"  : "select * from table1" // * Required
        }


+ Response 201 (application/json)

    + Headers
    
        Location: <link_to_the_created_batch> // see GET /api/qs/batch/<batch_slug>/
        
    + Body
    
        {
            "visualization": String // link to visualization of the created batch
        }

## /api/qs/batch/<batch_slug>/

### GET

Retrieve the created batch.

+ Request (application/json)

    + Headers

        Authorization: Token 7f3e205e-34c9-4791-a343-83988b230d0e


+ Response 200 (application/json)

    + Body

        {
            "columns": { // see GET /api/qs/batch/<batch_slug>/columns/ },
            "tables" : { // see GET /api/qs/batch/<batch_slug>/tables/  },
            "positions_map": {
            // Use for searching for object according to its sql code position.
            // Best performance can be achieved for nicely formated sql code
            // (e.g. each selected column on seperate line).
                "columns": {
                    // Array of lines of column positions. The first line
                    // in sql source code is first in the array, second
                    // line is second and so on.
                    // The column positions on their line are sorted to
                    // ensure source column always precedes its alias and
                    // artificial columns like WHERE are always put last.
                    "lines": [[{
                        "id"   : ColumnId, // Id of a column at the position
                        "start": Number,   // Start character position inclusive
                        "end"  : Number    // End character position exclusive.
                                           // Starts from 1. High number is used
                                           // to indicate end of line
                    }]]
                },
                "tables": {
                    // Array of lines of table positions. Contains sub-selects
                    // too. The first line in sql source code is first in the
                    // array, second line is second and so on. Multi-line
                    // elements thus occurs on multiple times in the array.
                    // The table positions on their line are sorted to
                    // ensure nested table precedes enclosing table.
                    "lines": [[{
                        "id"   : TableId, // Id of a table at the position
                        "start": Number,  // Start character position inclusive
                        "end"  : Number   // End character position exclusive.
                                          // Starts from 1. High number is used
                                          // to indicate end of line
                    }]]
                }
            }
        }

+ Response 202 (application/json)

    + Body
        {
            // empty body, the batch not ready yet, try again later
        }

## /api/qs/batch/<batch_slug>/columns/

### GET

Retrieve all columns of the created batch.
NOTE: the url not active yet

+ Request (application/json)

    + Headers

        Authorization: Token 7f3e205e-34c9-4791-a343-83988b230d0e


+ Response 200 (application/json)

    + Body

        {
            <column_id>: {
                "id"       : Number,       // Column id
                "name"     : String,       // Column name
                "table"    : TableId,      // Parent table id 
                "position" : Number,       // Position in parent table
                "positions": [Position],   // Array of positions of the
                                           // column in sql code; see
                                           // legend below
                "inputs"   : { // Input data flow relations
                    <data_flow_relation_type>: [{   // see legend below
                        "column": ColumnId,         // Source column id
                        "id"    : ColumnRelationId, // Column relation id 
                    }]
                    ...
                },
                "outputs"  : { // Output data flow relations
                    <data_flow_relation_type>: [{
                        "column": ColumnId,         // Target column id
                        "id"    : ColumnRelationId, // Column relation id 
                    }]
                    ...
                }
                "joins"    : [{ // Join relations
                    "column": ColumnId,         // Joined column id
                    "id"    : ColumnRelationId, // Column relation id 
                }]
            },
            ...
        }
        
// Position: [[<start_line>, <start_char>], [<end_line>, <end_char>]]
//      - <start_line> - position of start line inclusive
//      - <start_char> - position of start character inclusive
//      - <end_line>   - position of end line inclusive
//      - <end_char>   - position of end character exclusive
//      - the positions start from 1
//      
// Data flow relation types legend:
//      DFCVT       - relation between two columns
//      DFCVTCONST  - relation between constant and column
//      DFCVTINDIR  - relation between column and artificial
//                    column like WHERE

+ Response 202 (application/json)

    + Body
        {
            // empty body, the batch not ready yet, try again later
        }

## /api/qs/batch/<batch_slug>/tables/

### GET

Retrieve all tables of the created batch.
NOTE: the url not active yet

+ Request (application/json)

    + Headers

        Authorization: Token 7f3e205e-34c9-4791-a343-83988b230d0e


+ Response 200 (application/json)

    + Body

        {
            <table_id>: {
                "id"       : Number,     // Table id
                "name"     : String,     // Table name
                "columns"  : [ColumnId], // Sorted array of column ids
                "positions": [Position],   // Array of positions of the
                                           // table in sql code; see
                                           // legend below
            },
            ...
        }

// Position: [[<start_line>, <start_char>], [<end_line>, <end_char>]]
//      - <start_line> - position of start line inclusive
//      - <start_char> - position of start character inclusive
//      - <end_line>   - position of end line inclusive
//      - <end_char>   - position of end character exclusive
//      - the positions start from 1

+ Response 202 (application/json)

    + Body
        {
            // empty body, the batch not ready yet, try again later
        }